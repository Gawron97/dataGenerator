1.    //Pobieranie danych skarg dla wszytkich userów
SELECT _user.first_name, _user.last_name, complain.title, complain.submission_date
FROM _user
JOIN student ON _user.id = student.id_user
JOIN complain ON student.id = complain.id_student;

2.    //Pobranie Kkażdego piętra z każdego akademika i policzenie wolnych miejsc oraz łącznej liczby łóżek
SELECT dormitory.name, floor.level, COUNT(room.id) AS available_rooms, SUM(room.number_of_beds) AS total_beds
FROM dormitory
JOIN floor ON dormitory.id = floor.id_dormitory
LEFT JOIN room ON floor.id = room.id_floor AND room.is_available = true
GROUP BY dormitory.name, floor.level;

3.        //Pobranie wszystkich dodatkowych usług dla każdego akademika
SELECT dormitory.name, additional_services.name AS service_name
FROM dormitory
JOIN dormitory_services ON dormitory.id = dormitory_services.id_dormitory
JOIN additional_services ON dormitory_services.id_additional_service = additional_services.id;

4.        //Pobranie wszystkich pracowników ochrony wraz z ich akademikiem oraz kwalifikacjami
SELECT _user.first_name, _user.last_name, security.qualifications, dormitory.name AS assigned_dormitory
FROM _user
JOIN security ON _user.id = security.id_user
JOIN dormitory_security ON security.id = dormitory_security.id_security
JOIN dormitory ON dormitory_security.id_dormitory = dormitory.id;

5.    //Pobranie infoirmaicj o wszystkich studentach wraz z ich akademikiem, pokojem, piętrem oraz numerem kontaktowym do studenta
SELECT _user.first_name, _user.last_name, _user.contact_number, room.room_number, dormitory.name AS dormitory_name, floor.level AS floor_level
FROM _user
JOIN student ON _user.id = student.id_user
JOIN contract ON student.id = contract.id_student
JOIN room ON contract.id_room = room.id
JOIN floor ON room.id_floor = floor.id
JOIN dormitory ON floor.id_dormitory = dormitory.id;

6.    //Wszytkie płatności wraz z informacją kto placił, za co jaka cene i jaki jest status płatności
SELECT _user.first_name, _user.last_name, payment.description, payment.creation_date, payment.price, payment_status.status AS payment_status
FROM _user
JOIN student ON _user.id = student.id_user
JOIN payment ON student.id = payment.id_student
JOIN payment_status ON payment.id_payment_status = payment_status.id;

7.    //Pobranie wszystkich managerów wraz z ich akademikiem oraz grafikiem pracy
SELECT _user.first_name, _user.last_name, manager.work_schedule, dormitory.name AS managed_dormitory
FROM _user
JOIN manager ON _user.id = manager.id_user
JOIN dormitory ON manager.id_user = dormitory.id_manager;

8.    //Wypisanie wszytkich pokoi ze wszytkich akademików wraz z informacją o module w którym sie znajdują
SELECT dormitory.name AS dormitory_name, room.room_number, module_type.type AS module_type
FROM dormitory
JOIN floor ON dormitory.id = floor.id_dormitory
JOIN room ON floor.id = room.id_floor
JOIN module ON room.id_module = module.id
JOIN module_type ON module.id_module_type = module_type.id;

9.    //Pobranie liczbę wsztkich wolnych łózek we wszytkich akademikach
SELECT SUM(r.free_beds) AS total_available_beds
FROM dormitory d
JOIN floor f ON d.id = f.id_dormitory
JOIN room r ON f.id = r.id_floor
WHERE r.is_available = true;

9.1. //Liczba wolnych łóżek w konkretnym akademiku
SELECT SUM(r.free_beds) AS total_available_beds
FROM dormitory d
JOIN floor f ON d.id = f.id_dormitory
JOIN room r ON f.id = r.id_floor
WHERE r.is_available = true AND d.name = 'T3';

10.   //Pobranie wszystkich informacji o akademikach (ustawy, kryteria przycjecia oraz opis akademików)
SELECT d.name AS dormitory_name, d.description AS dormitory_description, s.content AS statute_name, s.additional_info AS statute_content, r.criterion AS requirement_criterion
FROM dormitory d
JOIN dormitory_requirements dr ON d.id = dr.id_dormitory
JOIN requirements r ON dr.id_requirement = r.id
JOIN statute s ON d.id_statute = s.id;

11. //Zestawienie płatnośći studanta o danym id

SELECT
    u.first_name || ' ' || u.last_name AS student_name,
	s.id as student_id,
    p.id AS payment_id,
    p.description AS payment_description,
    p.creation_date AS payment_creation_date,
    p.price AS payment_price,
    ps.status AS payment_status
FROM payment p
JOIN student s ON p.id_student = s.id
JOIN _user u ON s.id_user = u.id
JOIN payment_status ps ON p.id_payment_status = ps.id
WHERE s.id = <ID_STUDENTA>;

12. //Zestawienie ile aplikacji danego typu było w konkretnym roku

SELECT at.type AS application_type, COALESCE(COUNT(a.id), 0) AS count
FROM application_type at
LEFT JOIN application a ON at.id = a.id_application_type
AND EXTRACT(YEAR FROM a.submission_date) = 2022
GROUP BY at.type
ORDER BY count DESC;

13. //Liczba studentów z danego wydziału w podanym roku - 0 gdy nie ma żadnych w danym roku

SELECT f.name AS faculty, COALESCE(COUNT(a.id), 0) AS student_count
FROM faculty f
LEFT JOIN field_of_study fos ON f.id = fos.id_faculty
LEFT JOIN student_field_of_studies sfos ON fos.id = sfos.id_field_of_study
LEFT JOIN student s ON sfos.id_student = s.id
LEFT JOIN application a ON s.id = a.id_student
AND EXTRACT(YEAR FROM a.submission_date) = 2023
GROUP BY f.name
ORDER BY student_count DESC;

14. //Zyski z opłat za wynajem dla poszczególnych akademikóww w danym roku - 0 gdy nie ma żadnych opłat

SELECT d.name AS dormitory_name, COALESCE(SUM(p.price), 0) AS total_payment
FROM dormitory d
LEFT JOIN floor f ON d.id = f.id_dormitory
LEFT JOIN room r ON f.id = r.id_floor
LEFT JOIN contract c ON r.id = c.id_room
LEFT JOIN contract_payments cp ON c.id = cp.id_contract
LEFT JOIN payment p ON cp.id_payment = p.id
AND EXTRACT(YEAR FROM p.creation_date) = 2023 AND p.id_payment_status = '3'
GROUP BY d.name;

15. // List studentów przyjętych do akademika w danym okresie

SELECT u.first_name, u.last_name, s.id, a.submission_date AS application_date, aps.status
FROM _user u
JOIN student s ON u.id = s.id_user
JOIN application a ON s.id = a.id_student
JOIN application_status aps ON a.id_application_status = aps.id
WHERE a.submission_date BETWEEN '01-01-2022' AND '12-12-2023' AND aps.status = 'Zaakceptowana';

16. //Lista studentow z platnosciami w danym roku nie dotyczacymi oplat za umowy

SELECT _user.first_name, _user.last_name, EXTRACT(YEAR FROM payment.creation_date) as payment_year,
       SUM(payment.price) as total_price
FROM payment
JOIN student ON payment.id_student = student.id
JOIN _user ON student.id_user = _user.id
WHERE EXTRACT(YEAR FROM payment.creation_date) = 2023 AND payment.id_payment_status = '15' AND
      NOT EXISTS (
      SELECT 1
      FROM contract_payments
      WHERE contract_payments.id_payment = payment.id
  )
GROUP BY _user.first_name, _user.last_name, EXTRACT(YEAR FROM payment.creation_date)