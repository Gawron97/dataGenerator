1. //przychody akademikow z platnosci za umowy w wybranym miesiacu danego roku

db.dormitory.aggregate([
  {
    $lookup: {
      from: "floor",
      localField: "id",
      foreignField: "id_dormitory",
      as: "floor"
    }
  },
  {
    $unwind: "$floor"
  },
  {
    $lookup: {
      from: "room",
      localField: "floor.id",
      foreignField: "id_floor",
      as: "room"
    }
  },
  {
    $unwind: "$room"
  },
  {
    $lookup: {
      from: "contract",
      localField: "room.id",
      foreignField: "id_room",
      as: "contract"
    }
  },
  {
    $unwind: "$contract"
  },
  {
    $lookup: {
      from: "contract_payments",
      localField: "contract.id",
      foreignField: "id_contract",
      as: "contract_payments"
    }
  },
  {
    $unwind: "$contract_payments"
  },
  {
    $lookup: {
      from: "payment",
      localField: "contract_payments.id_payment",
      foreignField: "id",
      as: "payment"
    }
  },
  {
    $unwind: "$payment"
  },
  {
    $match: {
      $expr: {
        $and: [
          { $eq: [{ $year: "$payment.creation_date" }, 2023] },
          { $eq: [{ $month: "$payment.creation_date" }, 5] }
        ]
      }
    }
  },
  {
    $group: {
      _id: "$name",
      total_price: { $sum: "$payment.price" }
    }
  },
  {
    $project: {
      _id: 0,
      dormitory_name: "$_id",
      total_price: 1
    }
  }
])

2. //Lista studentow, ktorzy maja aktualną umowe z akademikiem wraz z informacjami o wystawionych platnosciach
    //dla wybranego roku i miesiaca

db.payment.aggregate([
  {
    $lookup: {
      from: "student",
      localField: "id_student",
      foreignField: "id",
      as: "student"
    }
  },
  {
    $unwind: "$student"
  },
  {
    $lookup: {
      from: "_user",
      localField: "student.id_user",
      foreignField: "id",
      as: "user"
    }
  },
  {
    $unwind: "$user"
  },
  {
    $lookup: {
      from: "payment_status",
      localField: "id_payment_status",
      foreignField: "id",
      as: "payment_status"
    }
  },
  {
    $unwind: "$payment_status"
  },
  {
    $lookup: {
      from: "contract_payments",
      localField: "id",
      foreignField: "id_payment",
      as: "contract_payments"
    }
  },
  {
    $unwind: "$contract_payments"
  },
  {
    $lookup: {
      from: "contract",
      localField: "contract_payments.id_contract",
      foreignField: "id",
      as: "contract"
    }
  },
  {
    $unwind: "$contract"
  },
  {
    $match: {
      "contract.end_date": { $gt: ISODate("2023-11-21") },
      $expr: {
        $and: [
          { $eq: [{ $year: "$creation_date" }, 2023] },
          { $eq: [{ $month: "$creation_date" }, 5] }
        ]
      }
    }
  },
  {
    $project: {
      student_name: { $concat: ["$user.first_name", " ", "$user.last_name"] },
      student_id: "$student.id",
      payment_id: "$id",
      payment_description: "$description",
      payment_creation_date: "$creation_date",
      payment_price: "$price",
      payment_status: "$payment_status.status"
    }
  }
])


3. //Lista studentow razem z iloscia otrzymanych skarg

db.student.aggregate([
  {
    $unwind: "$complains"
  },
  {
    $group: {
      _id: "$_id",
      firstName: { $first: "$firstName" },
      lastName: { $first: "$lastName" },
      domicile: { $first: "$domicile" },
      contactNumber: { $first: "$contactNumber" },
      numberOfComplaints: { $sum: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      studentId: "$_id",
      firstName: 1,
      lastName: 1,
      domicile: 1,
      contactNumber: 1,
      numberOfComplaints: 1
    }
  }
]).forEach(printjson)

4. //Lista studentow z platnosciami w danym roku nie dotyczacymi oplat za umowy

db.payment.aggregate([
  {
    $match: {
      $expr: {
        $and: [
          { $eq: [{ $year: "$creation_date" }, 2023] },
          { $eq: ["$id_payment_status", "3"] },
          {
            $not: {
              $exists: {
                $elemMatch: {
                  $eq: ["$id", "$$payment_id"]
                }
              }
            }
          }
        ]
      }
    }
  },
  {
    $lookup: {
      from: "student",
      localField: "id_student",
      foreignField: "id",
      as: "student"
    }
  },
  {
    $unwind: "$student"
  },
  {
    $lookup: {
      from: "_user",
      localField: "student.id_user",
      foreignField: "id",
      as: "user"
    }
  },
  {
    $unwind: "$user"
  },
  {
    $group: {
      _id: {
        first_name: "$user.first_name",
        last_name: "$user.last_name",
        payment_year: { $year: "$creation_date" }
      },
      total_price: { $sum: "$price" }
    }
  },
  {
    $project: {
      _id: 0,
      first_name: "$_id.first_name",
      last_name: "$_id.last_name",
      payment_year: "$_id.payment_year",
      total_price: 1
    }
  }
])


5. // Ilość studentów przyjętych do akademika w danym okresie

db.student.aggregate([
  {
    $unwind: "$applications"
  },
  {
    $match: {
      "applications.applicationStatus": "ZAAKCEPTOWANA",
      "applications.submissionDate": {
        $gte: ISODate("2020-05-01"),
        $lt: ISODate("2021-01-01")
      }
    }
  },
  {
    $count: "total_accepted_applications"
  }
])


6. //Zyski z opłat za wynajem dla poszczególnych akademikóww w danym roku - 0 gdy nie ma żadnych opłat

db.dormitory.aggregate([
  {
    $lookup: {
      from: "floor",
      localField: "id",
      foreignField: "id_dormitory",
      as: "floor"
    }
  },
  {
    $unwind: {
      path: "$floor",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "room",
      localField: "floor.id",
      foreignField: "id_floor",
      as: "room"
    }
  },
  {
    $unwind: {
      path: "$room",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "contract",
      localField: "room.id",
      foreignField: "id_room",
      as: "contract"
    }
  },
  {
    $unwind: {
      path: "$contract",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "contract_payments",
      localField: "contract.id",
      foreignField: "id_contract",
      as: "contract_payments"
    }
  },
  {
    $unwind: {
      path: "$contract_payments",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "payment",
      localField: "contract_payments.id_payment",
      foreignField: "id",
      as: "payment"
    }
  },
  {
    $unwind: {
      path: "$payment",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $match: {
      $and: [
        { "payment.creation_date": { $gte: ISODate("2023-01-01"), $lt: ISODate("2024-01-01") } },
        { "payment.id_payment_status": "3" }
      ]
    }
  },
  {
    $group: {
      _id: "$name",
      total_payment: { $sum: { $ifNull: ["$payment.price", 0] } }
    }
  },
  {
    $project: {
      _id: 0,
      dormitory_name: "$_id",
      total_payment: 1
    }
  }
])

7. //Liczba studentów z danego wydziału w podanym roku - 0 gdy nie ma żadnych w danym roku

db.faculty.aggregate([
  {
    $lookup: {
      from: "field_of_study",
      localField: "id",
      foreignField: "id_faculty",
      as: "field_of_study"
    }
  },
  {
    $unwind: {
      path: "$field_of_study",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "student_field_of_studies",
      localField: "field_of_study.id",
      foreignField: "id_field_of_study",
      as: "student_field_of_studies"
    }
  },
  {
    $unwind: {
      path: "$student_field_of_studies",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "student",
      localField: "student_field_of_studies.id_student",
      foreignField: "id",
      as: "student"
    }
  },
  {
    $unwind: {
      path: "$student",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "application",
      let: { studentId: "$student.id" },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$$studentId", "$id_student"] },
                { $eq: [{ $year: "$submission_date" }, 2023] }
              ]
            }
          }
        }
      ],
      as: "application"
    }
  },
  {
    $unwind: {
      path: "$application",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $group: {
      _id: "$name",
      student_count: { $sum: { $cond: [{ $gt: ["$application.id", null] }, 1, 0] } }
    }
  },
  {
    $project: {
      _id: 0,
      faculty: "$_id",
      student_count: 1
    }
  },
  {
    $sort: {
      student_count: -1
    }
  }
])

8. //Zestawienie ile aplikacji danego typu było w konkretnym roku

db.student.aggregate([
  {
    $unwind: "$applications"
  },
  {
    $project: {
      _id: 0,
      applicationType: "$applications.applicationType",
      academicYear: 1,
      applicationYear: { $year: "$applications.submissionDate" },
      applicationStatus: "$applications.applicationStatus"
    }
  },
  {
    $match: {
      applicationYear: 2022 // Replace with the desired year
    }
  },
  {
    $group: {
      _id: "$applicationType",
      total_applications: { $sum: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      applicationType: "$_id",
      total_applications: 1
    }
  }
])

9. //Zestawienie płatnośći studanta o danym id

var studentId = "<ID_STUDENTA>"; // Replace with the actual student ID

db.student.aggregate([
  {
    $match: {
      "_id": ObjectId(studentId)
    }
  },
  {
    $unwind: "$payments"
  },
  {
    $group: {
      _id: "$payments.paymentStatus",
      total_price: { $sum: { $toDouble: "$payments.price" } }
    }
  },
  {
    $project: {
      _id: 0,
      payment_status: "$_id",
      total_price: 1
    }
  }
])

10.  //Liczba wolnych łóżek w konkretnym akademiku

db.dormitory.aggregate([
  {
    $match: {
      "name": "T2"
    }
  },
  {
    $unwind: "$floors"
  },
  {
    $unwind: "$floors.rooms"
  },
  {
    $group: {
      _id: null,
      total_available_beds: {
        $sum: {
          $cond: [
            { $eq: ["$floors.rooms.isAvailable", true] },
            "$floors.rooms.freeBeds",
            0
          ]
        }
      }
    }
  },
  {
    $project: {
      _id: 0,
      total_available_beds: 1
    }
  }
])