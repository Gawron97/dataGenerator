1. //przychody z platnosci za umowy w danym okresie

db.student.aggregate([
  {
    $unwind: "$contracts"
  },
  {
    $unwind: "$contracts.payments"
  },
  {
    $group: {
      _id: null,
      totalRevenues: {
        $sum: {
          $cond: [
            {
              $and: [
                { $eq: ["$contracts.payments.paymentStatus", "ZAKONCZONO"] },
                { $gte: ["$contracts.payments.creationDate", ISODate("2020-01-01")] },
                { $lt: ["$contracts.payments.creationDate", ISODate("2020-01-31")] }
              ]
            },
            { $toDouble: "$contracts.payments.price" },
            0
          ]
        }
      }
    }
  },
  {
    $project: {
      _id: 0,
      totalRevenues: 1
    }
  }
]).forEach(printjson)



2. //Lista studentow, ktorzy maja aktualną umowe z akademikiem wraz z informacjami o wystawionych platnosciach


db.student.aggregate([
  {
    $unwind: "$contracts"
  },
  {
    $unwind: "$contracts.payments"
  },
  {
    $match: {
      "contracts.payments.paymentStatus": "ZAKONCZONO",
      $expr: {
        $and: [
          { $gte: ["$contracts.end_date", ISODate(year + "-01-01")] },
          { $lt: ["$contracts.start_date", ISODate((year + 1) + "-01-01")] }
        ]
      }
    }
  },
  {
    $group: {
      _id: "$_id",
      firstName: { $first: "$firstName" },
      lastName: { $first: "$lastName" },
      totalContractPrices: { $sum: { $toDouble: "$contracts.payments.price" } }
    }
  },
  {
    $project: {
      _id: 0,
      studentId: "$_id",
      firstName: 1,
      lastName: 1,
      totalContractPrices: 1
    }
  }
]).forEach(printjson)


3. //Lista studentow razem z iloscia otrzymanych skarg

db.student.aggregate([
  {
    $unwind: "$complains"
  },
  {
    $group: {
      _id: "$_id",
      firstName: { $first: "$firstName" },
      lastName: { $first: "$lastName" },
      domicile: { $first: "$domicile" },
      contactNumber: { $first: "$contactNumber" },
      numberOfComplaints: { $sum: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      studentId: "$_id",
      firstName: 1,
      lastName: 1,
      domicile: 1,
      contactNumber: 1,
      numberOfComplaints: 1
    }
  }
]).forEach(printjson)

4. // Suma zakonczonych platnocsi studenta niedotyczacymi umow z danego okresu

var startDate = ISODate("2022-01-01");
var endDate = ISODate("2022-12-31");

db.student.aggregate([
  {
    $match: {
      "_id": ObjectId("65b260dcdf4ae52bfcd6ec78")
    }
  },
  {
    $unwind: "$payments"
  },
  {
    $group: {
      _id: null,
      total_price: {
        $sum: {
          $cond: [
            {
              $and: [
                { $eq: ["$payments.paymentStatus", "ZAKONCZONO"] },
                 { $gte: ["$payments.creationDate", ISODate("2000-01-01")]},
                 { $lte: ["$payments.creationDate", ISODate("2022-12-31")]}

              ]
            },
            { $toDouble: "$payments.price" },
            0
          ]
        }
      }
    }
  },
  {
    $project: {
      _id: 0,
      total_price: 1
    }
  }
]).forEach(printjson)


5. // Ilość studentów przyjętych do akademika w danym okresie

db.student.aggregate([
  {
    $unwind: "$applications"
  },
  {
    $match: {
      "applications.applicationStatus": "ZAAKCEPTOWANA",
      "applications.submissionDate": {
        $gte: ISODate("2020-05-01"),
        $lt: ISODate("2021-01-01")
      }
    }
  },
  {
    $count: "total_accepted_applications"
  }
])


6. //Zyski z opłat za wynajem dla poszczególnych akademikóww w danym roku - 0 gdy nie ma żadnych opłat

db.dormitory.aggregate([
  {
    $lookup: {
      from: "floor",
      localField: "name",
      foreignField: "dormitoryName",
      as: "floor"
    }
  },
  {
    $unwind: {
      path: "$floor",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "room",
      localField: "floor._id",
      foreignField: "floor_id",
      as: "room"
    }
  },
  {
    $unwind: {
      path: "$room",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "contract",
      let: { room_id: "$room._id" },
      pipeline: [
        {
          $match: {
            $expr: { $eq: ["$room.$ref", "room"] },
            "room.$id": "$$room_id"
          }
        }
      ],
      as: "contract"
    }
  },
  {
    $unwind: {
      path: "$contract",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "contract_payments",
      let: { contract_id: "$contract._id" },
      pipeline: [
        {
          $match: {
            $expr: { $eq: ["$contract.$ref", "contract"] },
            "contract.$id": "$$contract_id"
          }
        }
      ],
      as: "contract_payments"
    }
  },
  {
    $unwind: {
      path: "$contract_payments",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $lookup: {
      from: "payment",
      let: { payment_id: "$contract_payments.payment_id" },
      pipeline: [
        {
          $match: {
            $expr: { $eq: ["$_id", "$$payment_id"] },
            "creationDate": { $gte: ISODate("2023-01-01"), $lt: ISODate("2024-01-01") },
            "paymentStatus": "ZAKONCZONO"
          }
        }
      ],
      as: "payment"
    }
  },
  {
    $unwind: {
      path: "$payment",
      preserveNullAndEmptyArrays: true
    }
  },
  {
    $group: {
      _id: "$name",
      total_payment: { $sum: { $ifNull: ["$payment.price", 0] } }
    }
  },
  {
    $project: {
      _id: 0,
      dormitory_name: "$_id",
      total_payment: 1
    }
  },
  {
    $project: {
      dormitory_name: 1,
      total_payment: { $ifNull: ["$total_payment", 0] }
    }
  }
])

7. //Liczba studentów w poszczególnych wydziałach i latach akademickich

db.student.aggregate([
    {
      $unwind: "$studies"
    },
    {
      $group: {
        _id: {
          facultyName: "$studies.facultyName",
          academicYear: "$academicYear"
        },
        studentCount: { $sum: 1 }
      }
    },
    {
      $group: {
        _id: "$_id.facultyName",
        academicYears: {
          $push: {
            academicYear: "$_id.academicYear",
            studentCount: "$studentCount"
          }
        }
      }
    },
    {
      $project: {
        _id: 0,
        facultyName: "$_id",
        academicYears: 1
      }
    }
  ]).forEach(printjson)

8. //Zestawienie ile aplikacji danego typu było w konkretnym roku

db.student.aggregate([
  {
    $unwind: "$applications"
  },
  {
    $project: {
      _id: 0,
      applicationType: "$applications.applicationType",
      academicYear: 1,
      applicationYear: { $year: "$applications.submissionDate" },
      applicationStatus: "$applications.applicationStatus"
    }
  },
  {
    $match: {
      applicationYear: 2022 // Replace with the desired year
    }
  },
  {
    $group: {
      _id: "$applicationType",
      total_applications: { $sum: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      applicationType: "$_id",
      total_applications: 1
    }
  }
])

9. //Zestawienie płatnośći studanta o danym id

var studentId = "<ID_STUDENTA>"; // Replace with the actual student ID

db.student.aggregate([
  {
    $match: {
      "_id": ObjectId(studentId)
    }
  },
  {
    $unwind: "$payments"
  },
  {
    $group: {
      _id: "$payments.paymentStatus",
      total_price: { $sum: { $toDouble: "$payments.price" } }
    }
  },
  {
    $project: {
      _id: 0,
      payment_status: "$_id",
      total_price: 1
    }
  }
])

10.  //Liczba wolnych łóżek w konkretnym akademiku

db.dormitory.aggregate([
  {
    $match: {
      "name": "T2"
    }
  },
  {
    $unwind: "$floors"
  },
  {
    $unwind: "$floors.rooms"
  },
  {
    $group: {
      _id: null,
      total_available_beds: {
        $sum: {
          $cond: [
            { $eq: ["$floors.rooms.isAvailable", true] },
            "$floors.rooms.freeBeds",
            0
          ]
        }
      }
    }
  },
  {
    $project: {
      _id: 0,
      total_available_beds: 1
    }
  }
])